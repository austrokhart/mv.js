mvn.js - класс для перемещения элементов по странице и между собой.


Назначение:
  * перемещение элементов по странице;
  * организация слотов и взаимодействие с ними.


Функционал:
  * включение/отключение возможности перемещения элементов;
  * получение/назначение порядка элементов, состояния слотов (чтение/запись);
  * назначение пользовательских обработчиков на этапы перемещения;
  * кастомизация технического и визуального процесса перемещения.


Стандартное поведение:

  Пользователь нажимает на элемент, тянет его в новую область и отпускает. По-умолчанию элемент перемещается в режиме "shift", следует за указателем, его нельзя оставить вне слота и отключен режим динамического пересчёта координат.


Восстановление позиций элементов:

  Позиции элементов можно сохранить, получив и сохранив порядок элементов и смещение элементов. При следующей инициализации можно восстановить порядок элементов и их смещение.


Кастомизация визуализации перемещения:

  Визуальный процесс перемещения элементов может быть кастомизирован. Можно отключить следование за курсором и назначить пользовательский обработчик перемещения, который с помощью средств анимации будет перемещать элементы в новые позиции.


Идентификация элементов:

  При инициализации каждому элементу назначается идентификатор. Но в обработчики и методы класса передаётся позиция элемента в текущем порядке.


Опции:
  * slotMode: 'auto'*|'custom'
  Определяет режим работы слотов.

  * elemSel
  Определяет селектор перемещаемых элементов.

  * slotSel
  Определяет селектор слотов.

  * onTake
  * onEnter
  * onLeave
  * onDrop
  Определяет пользовательсики обрабочики событий перемещения.

  * swapMode: 'shift'*|'replace'|'custom'
  Определяет режим перемещения элементов.

  * swapHandler
  Определяет пользовательский обработчик перемещения элементов.

  * followPtr: true*|false
  Определяет следование целевого элемента за указателем.

  * dropOut: true|false*
  Определяет возможность оставлять целевой элемент вне слота.

  * recalcPos: true|false*
  Определяет динамический пересчёт координат элементов.


Режимы работы слотов:

  * 'auto'
  Количество слотов равно количеству элементов. Слоты организуются автоматически на основе списка элементов. Полезно для организации списков.

  * 'custom'
  Количество слотов может быть больше количества элементов, возможно организовывать свободные слоты. Слоты организуются пользователем. Полезно для конструкторов.


Режимы перемещения элементов:

  * 'shift'
  При перемещении элемента соседние сдвигаются в противоположную сторону, занимая освободившееся место.

  * 'replace'
  При перемещении элементы меняются между собой, не затрагивая соседние.

  * 'custom'
  Перемещение элементов осуществляется с помощью пользовательского обработчика swapHandler.


Возможность оставить целевой элемент вне слота:

  Элемент можно оставить вне слота, освободившийся слот можно занять другим элементом. Оставленный элемент опирается на свободный слот.


Пересчёт координат:

  Режим необходим в случаях, когда список элементов или их координаты изменяются динамически. Например, при перемещении и динамическом добавлении элементов или гибкой вёрстке и масштабировании.


Методы:

  Методы класса:

  * run()
  * stop()
  Включает/отключает возможность перемещать элементы по странице.
  
  * getOrder()
  Возвращает массив с порядком элементов.

  * setOrder(ord)
  Определяет порядок элементов (массив идентификаторов).

  * getElem(pos)
  Возвращает элемент по позиции в текущем порядке.

  * getElemById(id)
  Возвращает элемент по идентификатору.
  
  * getState(pos)
  Возвращает состояние слота.

  * setState(pos, st)
  Определяет состояние слота.

  * getOption(opt)
  Возвращает значение опции.

  * setOption(opt, val)
  Определяет значение опции.

  * swap(posA, posB)
  Обменивает элементы в слотах.

  * move(pos, x, y)
  Перемещает элемент в относительных координатах.

  * getMoved()
  Возвращает объект с перемещёнными элементами и координатами их относительного перемещения.

  * back(pos)
  Перемещает элемент в начало координат.

  Методы обработчиков:

  * hold()
  Удерживает целевой элемент в новой позиции.

  * drop()
  Бросает целевой элемент, прекращая обработку перемещения.


Определение порядка элементов:

  Порядок элементов определяется передачей массива с идентификаторами элементов и нулями на месте пустых слотов.


Состояния слотов:

  Слоты могут находиться в следующих состояниях:

  0: слот открыт для чтения и записи;
  1: слот открыт для чтения;
  2: слот открыт для записи;
  3: слот закрыт.


Удержание целевого элемента:

  При перемещении при выходе из нового элемента целевой элемент возвращается на место. Метод удержания переназначает это место. Чтобы элемент не возвращался на место, можно вызывать метод при каждом входе в новый элемент.


Обработчики:

  Для обработки этапов перемещения целевого элемента могут быть назначены обработчики:

  * onTake(targetPos, ptrCoord)
  Обработчик взятия элемента. В обработчик передаются позиция целевого элемента targetPos и объект с координатами указателя ptrCoord.

  * onEnter(targetPos, replPos, ptrCoord)
  Обработчик входа в новый элемент. В обработчик передаются позиция целевого элемента targetPos, позиция заменяемого элемента replPos и объект с координатами указателя ptrCoord.

  * onLeave(targetPos, replPos, ptrCoord)
  Обработчик выхода из элемента. В обработчик передаются позиция целевого элемента targetPos, позиция заменяемого элемента replPos и объект с координатами указателя ptrCoord.

  * onDrop(targetPos, ptrCoord)
  Обработчик отпускания элемента. В обработчик передаются позиция целевого элемента targetPos и объект с координатами указателя ptrCoord.

  Для обработки перемещения целевого элемента может быть назначен обработчик:

  * swapHandler(targetPos, replPos)
  Обработчик перемещения элементов. В обработчик передаются позиция целевого targetPos и позиция заменяемого replPos элементов.

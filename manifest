mv.js - класс для перемещения элементов по странице и между собой.


Назначение:
  * перемещение элементов по странице;
  * организация слотов и взаимодействие с ними.


Функционал:
  * включение/отключение возможности перемещения элементов;
  * получение/назначение порядка элементов, состояния слотов (чтение/запись);
  * кастомизация технического и визуального процесса перемещения.


Стандартное поведение:

  Пользователь нажимает на элемент, тянет его в новую область и отпускает. По-умолчанию элемент перемещается в режиме "shift", следует за указателем, его нельзя оставить вне слота и отключен режим динамического пересчёта координат.


Идентификация элементов:

  При инициализации каждому элементу назначается идентификатор, идентификаторы слотов соответствуют идентификаторам элементов. В методы класса и обработчики передаются идентификаторы слотов.


Кастомизация визуального перемещения:

  Визуальное перемещение элементов может быть кастомизировано. Можно отключить следование за курсором и назначить пользовательский обработчик перемещения, который с помощью средств анимации будет перемещать элементы в новые позиции.


Сохранение позиций элементов:

  Позиции элементов можно сохранить, получив и сохранив порядок элементов и их смещение. При следующей инициализации их можно восстановить.


Опции:

  * elemSel
  Определяет селектор перемещаемых элементов.

  * swapMode: 'shift'*|'replace'|'custom'
  Определяет режим перемещения элементов.

  * swapHandler
  Определяет пользовательский обработчик перемещения элементов.

  * onTake
  * onEnter
  * onLeave
  * onDrop
  Определяет пользовательские обрабочики этапов перемещения.

  * followPtr: true*|false
  Определяет режим следования целевого элемента за указателем.

  * dropOut: true|false*
  Определяет режим возможности оставлять целевой элемент вне слота.

  * recalcDyn: true|false*
  Определяет режим динамического пересчёта координат элементов. 


Режимы обмена элементов:

  Опцией swapMode элементы могут обмениваться в режимах:

    * 'shift'
    При перемещении элемента соседние сдвигаются в противоположную сторону, занимая освободившееся место.

    * 'replace'
    При перемещении элементы меняются между собой, не затрагивая соседние.

    * 'custom'
    Перемещение элементов осуществляется с помощью пользовательского обработчика swapHandler.


Режим возможности оставить вне слота:

  Режим dropOut позволяет оставлять элемент вне слота, освободившийся слот можно занять другим элементом. Элемент при этом сохраняет позицию и опирается на освободившийся слот.


Режим динамического пересчёта координат:

  Режим recalcDyn необходим в случаях, когда список элементов или их координаты изменяются динамически. Например, при перемещении и динамическом добавлении элементов или гибкой вёрстке и масштабировании.


Методы:

  Методы класса:

    * run()
    * stop()
    Включает/отключает возможность перемещать элементы по странице.
    
    * getOrder()
    Возвращает массив с порядком элементов.

    * setOrder(ord)
    Определяет порядок элементов (принимает массив идентификаторов).

    * getElem(id)
    Возвращает элемент по идентификатору.

    * setElem(id, elem)
    Определяет элемент под указанным идентификатором (перезаписывает существующий).

    * getElemPos(id)
    Возвращает позицию элемента по идентификатору.

    * getStates()
    Возвращает объект с идентификаторами слотов и их состояниями.

    * setStates(states)
    Определяет состояние слотов (принимает объект с идентификаторами слотов и их состояниями).

    * getOption(opt)
    Возвращает значение опции.

    * setOption(opt, val)
    Определяет значение опции.

    * swap(elemId, replId)
    Обменивает элементы в слотах.

    * move(id, x, y)
    Перемещает элемент в относительных координатах.

    * getMoved()
    Возвращает объект с идентификаторами перемещённых элементов и координатами их относительного перемещения.

  Методы обработчиков:

    * hold()
    Удерживает целевой элемент в новой позиции.

    * drop()
    Бросает целевой элемент, прекращая обработку перемещения.


Определение порядка элементов:

  Порядок элементов определяется с помощью метода setOrder(), точечные перестановки можно производить с помощью метода swap().


Состояния слотов:

  Чтение - из слота можно взять элемент, но в него нельзя произвести запись. Состояния:

  0: слот открыт для чтения и записи;
  1: слот открыт для чтения;
  2: слот открыт для записи;
  3: слот закрыт.


Удержание целевого элемента:

  При перемещении, при выходе из нового элемента целевой элемент возвращается на место. Метод удержания hold() переназначает это место. Чтобы элемент не возвращался на место, необходимо вызывать метод hold() при каждом входе в новый элемент.


Обработчики:

  Для обработки обмена целевого элемента может быть назначен:

  * swapHandler(targetId, replId)
  Обработчик перемещения элементов. В обработчик передаются:
    targetId - идентификатор целевого элемента,
    replId   - идентификатор заменяемого элемента,

  Для обработки этапов перемещения могут быть назначены:

  * onTake(targetId, ptrCoord)
  Обработчик взятия элемента. В обработчик передаются:
    targetId - идентификатор целевого элемента,
    ptrCoord - объект с координатами указателя.

  * onEnter(targetId, replId, ptrCoord)
  Обработчик входа в новый элемент. В обработчик передаются:
    targetId - идентификатор целевого элемента,
    replId   - идентификатор заменяемого элемента,
    ptrCoord - объект с координатами указателя.

  * onLeave(targetId, replId, ptrCoord)
  Обработчик выхода из элемента. В обработчик передаются:
    targetId - идентификатор целевого элемента,
    replId   - идентификатор заменяемого элемента,
    ptrCoord - объект с координатами указателя.

  * onDrop(targetId, ptrCoord)
  Обработчик отпускания элемента. В обработчик передаются:
    targetId - идентификатор целевого элемента,
    ptrCoord - объект с координатами указателя.

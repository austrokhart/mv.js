ДОКУМЕНТАЦИЯ.


mv.js - класс для перемещения элементов по странице и между собой.


Назначение:

  * перемещение элементов;
  * обработка этапов перемещения.


Функционал:

  * возможность перемещения элементов;
  * возможность обработки событий перемещения (взятие, перемещение, вход, выход, отпуск);
  * возможность обработки порядка элементов.
  * возможность обработки состояния элементов (чтение/запись);


Идентификация элементов:

  Для идентификации элементов используется атрибут data-mvId, он назначается автоматически всем элементам под селектором или вручную для более удобного обращения.


Позиционирование элементов:

  Методы позиционирования элементов могут производить позиционирование относительно окна, документа или ближайшего родительского элемента (отпозиционированного). Программно позиционирование происходит относительно ближайшего родительского элемента или относительно документа.


Состояния элементов:

  Состояния элементов влияют на процесс перемещения. Элементы, недоступные для взятия, не инициализируют процесс перемещения, а элементы, недоступные для замены, не вызывают обработчики событий при пересечении. Доступные состояния:

  * 0: Элемент доступен для взятия и замены;

  * 1: Элемент доступен для взятия;

  * 2: Элемент доступен для замены;

  * 3: Элемент недоступен.

  При установке элементу назначается атрибут data-mvState. Установка состояний производится программно или вручную указанием атрибутов элементам.


События перемещения:

  События перемещения содержат данные о действиях указателя для связи с действиями над элементами. Перемещение включает минимум два события:

  * взятие
    Вызывается при нажатии указателя над элементом.

  * отпуск
    Вызывается при отжатии указателя.

  Также перемещение включает события:

  * движение 
    Вызывается при движении указателя.

  * вход
    Вызывается при входе указателя в элемент.

  * выход
    Вызывается при выходе указателя из элемента


Действия над элементами:
  
  * позиционирование элементов
    Методы позиционирования позволяют позиционировать элементы, снимать позиционирование и получать данные о текущем положении элемента (относительно окна, страницы или родительского элемента).

  * обмен элементов
    Обработчики обмена позволяют обменивать элементы в требуемом порядке.


Двойники элементов:

  Двойники предназначены для обозначения начального положения элемента. Они устанавливаются после элемента, берут на себя его представление и вызывают событие onEnter/onLeave при пересечении, в котором передают идентификатор оригинального элемента. 

  При установке оригинальному элементу назначается атрибут data-mvHasTwin, а двойнику атрибут data-mvTwinId со значением, идентичным идентификатору оригинального элемента. Установка двойников производится программно или вручную указанием атрибутов элементам.


Атрибуты:

  * data-mvId
    Программно/вручную назначается элементам для идентификации.

  * data-mvHasTwin
    Программно/вручную назначается/удаляется элементу для индикации наличия двойника.

  * data-mvTwinId
    Программно/вручную назначается/удаляется двойнику для связи с оригинальным элементом.

  * data-mvTaken
    Программно назначается/удаляется элементу для индикации взятия элемента при взятии/отпуске.


Свойства:

  * selector: str
    Определяет селектор перемещаемых элементов.

  * ptrOffset: obj
    Определяет смещение относительно указателя при вычислении пересечения элементов.

  * posHandlers: obj
    Определяет объект с обработчиками позиционирования элементов.

  * swapHandlers: obj
    Определяет объект с обработчиками обмена элементов.

  * onTake, onMove, onEnter, onLeave, onDrop: func
    Определяет обработчики событий перемещения.


Обработчики обмена:

  Объект swapHandlers изначально содержит обработчики:

  * replace(id: str, swapId: str): void
    Производит обмен элементов между собой.

  * shift(id: str, swapId: str): void
    Производит перемещение элемента на место другого со сдвигом соседних.


Обработчики позиционирования:

  Объект posHandlers изначально содержит обработчик:

  * takeOffset(pos: obj, offset: obj): obj
    Возвращает объект с позицией с учётом смещения.


Обработчики событий:

  * onTake(id: str, ptrInfo: obj): void
    id - идентификатор элемента
    ptrInfo - объект с данными указателя

  * onMove(id: str, ptrInfo: obj): void
    id - идентификатор элемента
    ptrInfo - объект с данными указателя

  * onEnter(id: str, enterId: str, ptrInfo: obj): void
    id - идентификатор элемента
    enterId - идентификатор пересечённого элемента
    ptrInfo - объект с данными указателя

  * onLeave(id: str, leaveId: str, ptrInfo: obj): void
    id - идентификатор элемента
    leaveId - идентификатор пересечённого элемента
    ptrInfo - объект с данными указателя

  * onDrop(id: str, ptrInfo: obj): void
    id - идентификатор элемента
    ptrInfo - объект с данными указателя


Методы:

  * on(): void, off(): void
    Производит включение/отключение возможности перемещения элементов.

  * getElem(id: str): node
    Возвращает элемент по идентификатору.

  * setElem(id: str, elem: node|null): void
    Определяет/перезаписывает/удаляет элемент по идентификатору.

  * getOrder(): obj
    Возвращает объект с позициями и идентификаторами элементов.

  * setOrder(order: obj, [swapHandler: func]): void
    Определяет порядок элементов, принимает объект с позициями и идентификаторами элементов и поочерёдно передаёт их в обработчик обмена (по-умолчанию replace).

  * getState(id: str): obj
    Возвращает состояние элемента по идентификатору.

  * setState(id: str, state: int): void
    Определяет состояние элемента по идентификатору.

  * getTwin(id: str): obj
    Вовзращает объект с состоянием и двойником элемента по идентификатору.

  * setTwin(id: str, elem: node|null): void
    Определяет/перезаписывает/удаляет двойника элемента по идентификаторy.

  * moveTo(id: str, pos: obj, [relTo: str]): void
    Производит позиционирование элемента по идентификатору относительно окна (по-умолчанию), страницы или родительского элемента.

  * moveBack(id: str): void
    Производит снятие позиционирования элемента по идентификатору.

  * moveInfo(id: str, [relTo: str]): obj
    Возвращает объект с позицией элемента относительно окна (по-умолчанию), страницы или родительского элемента.

Методы, доступные в обработчиках событий перемещения:

  * drop(): void
    Производит прекращение обработки перемещения.


РЕАЛИЗАЦИЯ.


Публичные:
  
  Свойства:

  * selector: str

  * ptrOffset: obj

  * posHandlers: obj
    {
      takeOffset: func
    }

  * swapHandlers: obj
    {
      replace: func,
      shift: func
    }

  * onTake, onMove, onEnter, onLeave, onDrop: func


  Методы: 

  * on(): void
  * off(): void
    +_.active

  * getElem(id: str): node
  * setElem(id: str, elem: node|null): void
    +[data-mvId]

  * getOrder(): obj
  * setOrder(order: obj, [swapHandler: func]): void
    +selector

  * getState(id: str): obj
  * setState(id: str, state: int): void
    +[data-mvState]

  * getTwin(id: str): obj
  * setTwin(id: str, elem: node|null): void
    +[data-mvId] +[data-mvHasTwin] +[data-mvTwinId]

  * moveTo(id: str, pos: obj, [relTo: str]): void
  * moveBack(id: str): void
  * moveInfo(id: str, [relTo: str]): obj
    +[data-mvId] +_.mkParentInfo()

  * drop(): void
  +_.ptrHandlers


Защищённые:

  Свойства:

  * active: bool
    Определяет доступность перемещения.

  * counterId: int
    Содержит последний автоматический идентификатор.

  * ptrHandlers: obj
    Содержит обработчики действий указателя.

  * takenInfo: obj
    Содержит объект с состоянием взятия элемента и его идентификатором.

    takenInfo: {
      state: bool,
      id: str
    }

  * insideInfo: obj
    Содержит объект с состоянием нахождения указателя в границах элемента и идентификатором этого элемента.

    insideInfo: {
      state: bool,
      id: str
    }

  * ptrInfo: obj
    Содержит объект с данными об указателе (смещение относительно элемента).

    ptrInfo: {
      offset: {
        elem: {
          x: int,
          y: int
        }
      }
    }


  Методы:

  * updateId(): void
    +selector +counterId
    Производит идентификацию неидентифицированных элементов под селектором.

  * mkInsideInfo(ptrPos: obj): obj
    +selector +[data-mvId] +[data-mvHasTwin] +[data-mvTwinId]
    Возвращает объект с состоянием нахождения указателя в границах элемента и его идентификатором. Возвращаемые значения:

    * true и data-mvId, если элемент имеет этот атрибут, доступен для записи и не имеет атрибута data-mvHasTwin
    * true и data-twinId, если элемент имеет этот атрибут
    * false

    insideInfo: {
      state: bool,
      id: str
    }

  * mkPtrInfo(ptrPos: obj): obj
    +ptrOffset +_.ptrInfo
    Возвращает объект с данными об указателе.

    ptrInfo: {
      pos: {
        client: {
          x: int,
          y: int
        },
        page: {
          x: int,
          y: int
        }
      },
      offset: {
        ptr: {
          x: int,
          y: int
        },
        elem: {
          x: int,
          y: int
        }
      }
    }

  * mkParentInfo(elem: node): obj
    Возвращает объект с позицией ближайшего отпозиционированного родительского элемента или начала документа.

    parentInfo: {
      pos: {
        page: {
          x: int,
          y: int
        }
      }
    }


Обработчики действий указателя:

  * downHandler

    Обработчик нажатия указателя. Определяет исходные данные и обновляет состояния, назначает обработчики moveHandler и dropHandler, вызывает обработчик события взятия.

    Назначается методом on() на глобальное событие клика.

    Прекращает обработку, если:
    * не совпадает селектор
    * недоступно взятие элемента
    * _.takenInfo.state: true

    Определяет:
    * _.takenInfo
    * _.insideInfo
    * _.ptrInfo

    Назначает:
    * moveHandler
    * dropHandler

    Вызывает:
    * onTake

  * moveHandler

    Обработчик перемещения указателя. Вычисляет пересечение границ элементов указателем, записывает данные последнего пересечённого элемента, вызывает обработчики события движения, входа, выхода.

    Прекращает обработку, если:
    * удалён взятый элемент

    Вычисляет:
    * insideInfo

    Определяет:
    * _.insideInfo

    Вызывает:
    * onMove
    * onEnter, если указатель вошёл в элемент
    * onLeave, если указатель вышел из элемента

  * upHandler

    Обработчик отжатия указателя. Удаляет исходные данные и обновляет состояния, снимает обработчики moveHandler и dropHandler, вызывает пользовательский обработчик onDrop.

    Определяет:
    * _.takenInfo
    * _.ptrInfo

    Снимает:
    * moveHandler
    * upHandler

    Вызывает:
    * onTake


Нестандартное поведение:

  * Удаление взятого элемента
  Отслеживание целостности элемента, прекращение обработки перемещения.

  * Удаление соседнего элемента
  Пересечение элементов вычисляется динамически.
  
  * Отсутствие двойника
  Недоступность элемента.